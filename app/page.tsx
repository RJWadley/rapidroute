import { styled } from "@linaria/react"
import {
	HydrationBoundary,
	QueryClient,
	dehydrate,
} from "@tanstack/react-query"
import "./global.css"
import MinecraftMap from "./components/Map/MapServer"
import RouteOptions from "./components/RouteOptions"
import { RoutingProvider } from "./components/RoutingContext"
import { SearchBox } from "./components/SearchBox"
import SelectedRoute from "./components/SelectedRoute"
import WikiArticle from "./components/Wiki/WikiArticle"
import { getArticleContent } from "./components/Wiki/getArticleContent"
import { findPath } from "./pathing"
import { compressedPlaces } from "./utils/compressedPlaces"
import { getSearchParams } from "./utils/getSearchParams"
import { findClosestPlace } from "./utils/search"

export const metadata = {
	title: "Create Next App!!!",
	description: "Generated by create next app",
}

export default async function MainPage() {
	const queryClient = new QueryClient()

	// prefetch wiki article
	const fromID = getSearchParams().get("from")
	const toID = getSearchParams().get("to")
	const relevantPlace = findClosestPlace(toID, compressedPlaces)
	const name = relevantPlace?.name || relevantPlace?.id || toID
	if (!fromID)
		await queryClient.prefetchQuery({
			queryKey: ["wiki-article", name],
			queryFn: async () => {
				return name ? getArticleContent(name) : null
			},
		})

	// prefetch route
	await queryClient.prefetchQuery({
		queryKey: ["find-path", fromID, toID],
		queryFn: () => findPath(fromID, toID),
	})

	return (
		<HydrationBoundary state={dehydrate(queryClient)}>
			<RoutingProvider>
				<Application>
					<MinecraftMap />
					<Column>
						<SearchBox places={compressedPlaces}>
							<br />
							<WikiArticle places={compressedPlaces} />
						</SearchBox>
						<RouteOptions />
					</Column>
					<Column>
						<SelectedRoute />
					</Column>
				</Application>
			</RoutingProvider>
		</HydrationBoundary>
	)
}

const Application = styled.div`
	width: 100dvw;
	height: 100dvh;
	overflow: clip;
	display: grid;
	grid-template-columns: 1fr 1fr 1fr;
	place-items: start stretch;
`

const Column = styled.div`
	position: relative;
	z-index: 2;
	height: 100dvh;
	overflow: auto;
	pointer-events: none;
	
	& > * {
		pointer-events: auto;
	}
`
