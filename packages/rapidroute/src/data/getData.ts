/*  eslint-disable no-console */
import {
  Hashes,
  databaseTypeGuards,
  Location,
  DatabaseDataKeys,
  DataDatabaseType,
} from "@rapidroute/database-types"

import isObject from "utils/isObject"
import { getLocal, setLocal } from "utils/localUtils"

import { subscribe } from "./firebase"
import isCoordinate from "./isCoordinate"

const defaultDatabaseCache: DataDatabaseType = {
  locations: {},
  pathfinding: {},
  providers: {},
  routes: {},
  searchIndex: {},
}
const defaultHashes: Hashes = {
  locations: undefined,
  pathfinding: undefined,
  providers: undefined,
  routes: undefined,
  searchIndex: undefined,
}
const databaseCache = getLocal("databaseCache") ?? defaultDatabaseCache
const oneHashes = getLocal("oneHash") ?? defaultHashes
const allHashes = getLocal("allHash") ?? defaultHashes

let databaseHashes: Hashes = {
  locations: "",
  pathfinding: "",
  providers: "",
  routes: "",
  searchIndex: "",
}
const hashesExist = new Promise(resolve => {
  subscribe("hashes", rawValue => {
    if (isObject(rawValue)) {
      databaseHashes = { ...defaultHashes, ...rawValue }
    }
    resolve(true)
  })
})

type GetAll<T extends DatabaseDataKeys> = NonNullable<DataDatabaseType[T]>
type GetOne<T extends DatabaseDataKeys> = NonNullable<
  DataDatabaseType[T]
>[string]

async function getPathFromDatabase<T extends DatabaseDataKeys>(
  type: T,
  itemName: string
): Promise<GetOne<T> | null> {
  return new Promise(resolve => {
    subscribe(`${type}/${itemName}`, dataIn => {
      const data = isObject(dataIn) ? { ...dataIn, uniqueId: itemName } : dataIn
      if (!databaseTypeGuards[type](data)) {
        console.log("guard failed", type, data)
        return resolve(null)
      }
      databaseCache[type] = {
        ...databaseCache[type],
        [itemName]: data,
      }
      return resolve(data)
    })
  })
}

async function getAllFromDatabase<T extends DatabaseDataKeys>(
  type: T
): Promise<GetAll<T>> {
  // otherwise, get the value from the database
  return new Promise(resolve => {
    subscribe(type, rawData => {
      const data: GetAll<T> = {}

      if (isObject(rawData)) {
        // for each item, add the uniqueId
        Object.keys(rawData).forEach(key => {
          const item = rawData[key]
          if (isObject(item)) item.uniqueId = key
        })

        // filter out values that don't match the type guard
        Object.entries(rawData).forEach(([key, item]) => {
          // if key is a symbol, it's not a valid key
          if (typeof key === "symbol") return

          if (databaseTypeGuards[type](item)) {
            data[key] = item
          } else {
            console.log("guard failed", type, item)
          }
        })
      }

      return resolve(data)
    })
  })
}

const queue: Array<() => Promise<unknown>> = []

export async function runQueue() {
  while (queue.length) {
    const next = queue.shift()
    // eslint-disable-next-line no-await-in-loop
    if (next) await next()
  }

  setTimeout(() => {
    runQueue().catch(console.error)
  }, 100)
}

runQueue().catch(console.error)

export async function getPath<T extends DatabaseDataKeys>(
  type: T,
  itemName: string
): Promise<GetOne<T> | null> {
  // some things are not in the database, so we need to check for that
  if (type === "locations" && isCoordinate(itemName)) {
    const xCoord = parseInt(itemName.split(", ")[0].split(": ")[1], 10)
    const zCoord = parseInt(itemName.split(", ")[1], 10)
    const out: Location = {
      uniqueId: itemName,
      name: itemName,
      shortName: `${xCoord}, ${zCoord}`,
      autoGenerated: true,
      type: "Coordinate",
      world: "New",
      enabled: true,
      isSpawnWarp: false,
      location: {
        x: xCoord,
        z: zCoord,
      },
    }
    if (databaseTypeGuards[type](out)) return out
  }

  // first get the hash from the database
  await hashesExist
  const hash = databaseHashes[type]

  // if the hash matches the one we have, return the cached value
  if (hash === oneHashes[type] && databaseCache[type]?.[itemName]) {
    console.log("cache hit", type, itemName)
    const output = databaseCache[type]?.[itemName]
    if (databaseTypeGuards[type](output)) return output
    console.log("guard failed", type, output)
  }
  if (hash !== oneHashes[type]) {
    console.log("hash mismatch", type, itemName)

    // clear the cache
    databaseCache[type] = {}
  } else {
    console.log("cache miss", type, itemName)
  }

  return new Promise(resolve => {
    queue.push(async () => {
      const path = await getPathFromDatabase(type, itemName)
      oneHashes[type] = hash
      setLocal("databaseCache", databaseCache)
      setLocal("oneHash", oneHashes)
      resolve(path)
    })
  })
}

export async function getAll<T extends DatabaseDataKeys>(
  type: T
): Promise<GetAll<T>> {
  // first get the hash from the database
  await hashesExist
  const hash = databaseHashes[type]

  // if the hash matches the one we have, return the cached value
  if (hash === allHashes[type] && databaseCache[type]) {
    console.log("cache hit", type)
    const output: GetAll<T> = databaseCache[type] ?? {}

    // filter out values that don't match the type guard
    Object.keys(output).forEach(key => {
      if (!databaseTypeGuards[type](output[key])) {
        console.log("guard failed", type, output[key])
        delete output[key]
      }
    })
    return output
  }
  if (hash !== allHashes[type]) {
    console.log("hash mismatch", type)

    // clear the cache
    databaseCache[type] = {}
  } else {
    console.log("cache miss", type)
  }

  return new Promise(resolve => {
    queue.push(async () => {
      const data = await getAllFromDatabase(type)
      databaseCache[type] = data
      allHashes[type] = hash
      oneHashes[type] = hash
      setLocal("databaseCache", databaseCache)
      setLocal("allHash", allHashes)
      setLocal("oneHash", oneHashes)
      resolve(data)
    })
  })
}
