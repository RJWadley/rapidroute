import { useQuery } from "@tanstack/react-query"
import styled, { keyframes } from "styled-components"

import { isBrowser } from "utils/functions"

import { WIKI_NO_CORS, WIKI_URL } from "./useWiki"

export default function InfoBox({ title }: { title: string }) {
  const { data, isLoading } = useQuery({
    queryKey: ["infobox", title],
    enabled: !!title,
    queryFn: async ({ signal }) => {
      if (!isBrowser()) return null
      const pageParams = {
        action: "parse",
        page: title,
        format: "json",
        redirects: "",
      }
      const url = `${WIKI_URL}api.php?${new URLSearchParams(
        pageParams
      ).toString()}`

      const response = await fetch(url, { signal })
      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
      const newData = (await response.json()) as InfoBoxType

      // parse the text as HTML
      const parser = new DOMParser()
      const html = parser.parseFromString(newData.parse.text["*"], "text/html")

      // get the infobox element
      const newBox = html.querySelector(".infobox")

      // find any trs with exactly two ths, where the first th says ft and the second m
      const twoThs = Array.from(newBox?.querySelectorAll("tr") ?? []).filter(
        tr =>
          tr.querySelectorAll("th").length === 2 &&
          tr.querySelector("th")?.textContent?.trim() === "ft" &&
          tr.querySelectorAll("th")[1]?.textContent?.trim() === "m"
      )

      // add the feetAndMeters class to that tr
      twoThs.forEach(tr => tr.classList.add("feetAndMeters"))

      if (!newBox) return null
      return (
        newBox.outerHTML
          .replaceAll('src="/', `src="${WIKI_NO_CORS}`)
          .replaceAll('href="/', `href="${WIKI_NO_CORS}`)
          .replaceAll("{{{subtextcolor}}}", "var(--default-text)")
          // split apart any srcset attributes, upgrade the src, and rejoin them
          .replaceAll(/srcset="(.*?)"/g, (match: string, p1: string) => {
            const srcset = p1
              .split(",")
              .map(src => src.trim())
              .map(src => {
                const [imageURL, size] = src.split(" ")
                return `${WIKI_NO_CORS}${imageURL} ${size}
                `
              })
              .join(",")
            return `srcset="${srcset}"`
          })
      )
    },
  })

  if (isLoading) return <Loading />
  return <Wrapper dangerouslySetInnerHTML={{ __html: data ?? "" }} />
}

// Generated by https://quicktype.io

export interface InfoBoxType {
  parse: Parse
}

export interface Parse {
  title: string
  pageid: number
  revid: number
  text: Text
  langlinks: unknown[]
  categories: Category[]
  links: Link[]
  templates: Link[]
  images: string[]
  externallinks: unknown[]
  sections: unknown[]
  parsewarnings: unknown[]
  displaytitle: string
  iwlinks: unknown[]
  properties: Property[]
}

export interface Category {
  sortkey: string
  "*": string
}

export interface Link {
  ns: number
  exists: string
  "*": string
}

export interface Property {
  name: string
  "*": string
}

export interface Text {
  "*": string
}

const pulse = keyframes`
  0% {
    background-position: 40% 0;
  }
  100% {
    background-position: -160% 0;
  }
`

const Loading = styled.div`
  background: linear-gradient(
    to right,
    var(--default-card-background) 0%,
    var(--dark-background) 10%,
    var(--default-card-background) 20%
  );
  background-size: 200% 100%;
  animation: ${pulse} 2s ease infinite;
  border-radius: 20px;
  transition: opacity 0.5s;
  pointer-events: none;
  margin-top: 20px;
  height: 100px;
`

const Wrapper = styled.div`
  padding: 20px;

  /* clear table styles */
  table,
  tbody,
  tr,
  td,
  th {
    display: block;
  }

  tr {
    display: flex;
  }

  td,
  th {
    flex: 1;
    padding: 5px 10px;
    border: none !important;
    border-radius: 10px;
  }

  .infobox-header {
    margin-top: 20px;
    margin-bottom: 10px;
    font-size: var(--small);
    font-weight: bold;
    color: #111;
  }

  .infobox-above {
    display: none;
  }

  .infobox-image {
    display: grid;
    gap: 5px;

    * {
      width: 100% !important;
    }
  }

  .infobox-caption {
    color: var(--low-contrast-text);
    background: var(--mid-background);
    padding: 5px;
    border-radius: 5px;
    margin-bottom: 10px;
  }

  .trow {
    display: flex;
    margin-top: 5px;
    gap: 5px;
  }

  img {
    width: 100% !important;
    object-fit: contain;
    border-radius: 5px;
    background: #eee;
  }

  .thumbimage img {
    object-fit: cover;
  }

  .infobox-data {
    line-height: 1.5em;
  }

  * {
    max-width: 100% !important;
    width: unset;
    height: unset;
  }

  /* fix default color for stuff with backgrounds */
  & *[style*="background"] {
    color: black;
  }

  tr[style*="background"] {
    margin: 5px;
    border-radius: 5px;
  }

  a:hover {
    text-decoration: underline;
  }

  a.selflink:hover {
    text-decoration: none;
  }

  .feetAndMeters {
    width: 50%;
    margin-left: 25% !important;
    background: var(--mid-background) !important;
    color: var(--low-contrast-text) !important;
  }

  sup {
    display: inline-block;
    font-size: 0.5em;
    transform: translateY(-0.5em);
  }

  sub {
    font-size: 0.5em;
  }
`
