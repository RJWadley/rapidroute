import { z } from "zod"

export const placeTypeSchema = z.union([
  z.literal("City"),
  z.literal("Airport"),
  z.literal("MRT Station"),
  z.literal("Other"),
  z.literal("Coordinate"),
])

export const coordinatesSchema = z.object({
  x: z.number(),
  z: z.number(),
  y: z.number().optional(),
})

export const locationSchema = z.object({
  /**
   * should match the database key
   */
  uniqueId: z.string(),
  /**
   * The display name of the location
   */
  name: z.string(),
  /**
   * a short name for the location, less than 5 letters, if possible
   */
  shortName: z.string(),
  /**
   * THE IATA code of the location, if it is an airport
   */
  IATA: z.string().optional(),
  /**
   * a short description of the location
   */
  description: z.string().optional(),
  /**
   * location within the world
   */
  location: coordinatesSchema.optional(),
  /**
   * owner or owners of the location
   */
  ownerPlayer: z.union([z.string(), z.array(z.string())]).optional(),
  /**
   * which world this location is in
   */
  world: z.string(),
  /**
   * whether this location is available in routes
   * e.g. a station might be closed or no longer in use
   */
  enabled: z.boolean(),
  /**
   * if true, this location may be overwritten automatically
   */
  autoGenerated: z.boolean(),
  /**
   * what type of place is this?
   */
  type: placeTypeSchema,
  /**
   * can we warp directly to this location from spawn?
   */
  isSpawnWarp: z.boolean(),
  /**
   * what route ids, if any, are available at this location?
   */
  routes: z.array(z.string()).optional(),
  /**
   * search keywords for use in the index
   */
  keywords: z.string().optional(),
})

export const locationsSchema = z.record(locationSchema)

export type Location = z.TypeOf<typeof locationSchema>
export type Locations = z.TypeOf<typeof locationsSchema>
export type PlaceType = z.TypeOf<typeof placeTypeSchema>

export const isLocation = (obj: unknown): obj is Location =>
  locationSchema.safeParse(obj).success
